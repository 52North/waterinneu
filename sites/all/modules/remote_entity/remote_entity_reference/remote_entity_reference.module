<?php
/**
 * @file remote_entity_reference.module
 * Contains main module code.
 */

/**
 * Implements hook_field_info().
 */
function remote_entity_reference_field_info() {
  return array(
    'remote_entref' => array(
      'label' => t('Remote entity reference'),
      'description' => t('This field holds a reference to an entity by its remote ID.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array(),
      'default_widget' => 'remote_entref_autocomplete',
      'default_formatter' => 'remote_entref_default',
      // Entity Metadata API support.
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function remote_entity_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // TODO?
}

/**
 * Implements hook_field_is_empty().
 */
function remote_entity_reference_field_is_empty($item, $field) {
  // We can't know what counts as empty for remote IDs.
  if (!isset($item['value']) || $item['value'] === '') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function remote_entity_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['max_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum length'),
    '#default_value' => $settings['max_length'],
    '#required' => FALSE,
    '#element_validate' => array('element_validate_integer_positive'),
    '#description' => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),
  );
  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function remote_entity_reference_field_widget_info() {
  return array(
    // We possibly can't reuse text_textfield via hook_field_widget_info_alter()
    // because it has expectations around formats etc. Note that number module
    // doesn't try this either.
    'remote_entref_textfield' => array(
      'label' => t('Text field'),
      'field types' => array('remote_entref'),
      'settings' => array('size' => 60),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function remote_entity_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#size' => $instance['widget']['settings']['size'],
    //'#element_validate' => array(), // TODO?
  );

  return array('value' => $element);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function remote_entity_reference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );

  return $form;
}
/**
 * Implements hook_field_formatter_info().
 */
function remote_entity_reference_field_formatter_info() {
  return array(
    'remote_entref_default' => array(
      'label' => t('ID'),
      'field types' => array('remote_entref'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function remote_entity_reference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // TODO
}

/**
 * Implements hook_field_formatter_view().
 */
function remote_entity_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'remote_entref_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['value']);
      }
      break;

  }

  return $element;
}
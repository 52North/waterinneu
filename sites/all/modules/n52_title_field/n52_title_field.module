<?php
/*
 * Copyright (C) 2015
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
 /*
  * Many parts of the following code are taken from
  * - title.module and
  * - title.admin.inc
  */
// TODO fix layout issue in field overview ui: add new group seems not to get a valid colspan value
// TODO add admin ui to edit the following values
const TITLE_FIELD_NAME = 'title_field';
const TITLE_DEFAULT_LANGUAGE = 'en';
const STEP = 5;

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * Provide setting to trigger title field re-sync
 */
function n52_title_field_form_field_ui_field_overview_form_alter(&$form, &$from_state) {
	if (isset($form['fields']) && isset($form['fields'][TITLE_FIELD_NAME])) {
		$admin_path = _field_ui_bundle_admin_path($form['#entity_type'], $form['#bundle']);
		$form['fields']['#header'][6]['colspan'] += 1;
		
		foreach (element_children($form['fields']) as $field_name) {
			if ($field_name == TITLE_FIELD_NAME) {
				$form['fields'][TITLE_FIELD_NAME]['field_update'] = array(
						'#type' => 'link',
						'#title' => t('update'),
						'#href' => $admin_path . '/fields/update/' . TITLE_FIELD_NAME,
						'#options' => array('attributes' => array('title' => t('Update %field with the values from the node title value.', array('%field' => TITLE_FIELD_NAME)))),
				);
			}
			else {
				$form['fields'][$field_name]['field_update'] = array();
			}
			// We need to tell the #parents elements that colspan should be increased
		}
	}
}

/**
 * Implements hook_menu()
 * 
 * Provides GUI dialog before performing title field update
 */
function n52_title_field_menu() {
	$items = array();
	
	// Taken from title.module::title_menu()
	foreach (entity_get_info() as $entity_type => $entity_info) {
		if (!empty($entity_info['field replacement'])) {
			foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
				// Blindly taken from field_ui_menu().
				if (isset($bundle_info['admin'])) {
					$path = $bundle_info['admin']['path'];
	
					if (isset($bundle_info['admin']['bundle argument'])) {
						$bundle_arg = $bundle_info['admin']['bundle argument'];
					}
					else {
						$bundle_arg = $bundle_name;
					}
	
					$access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
					$access += array(
							'access callback' => 'user_access',
							'access arguments' => array('administer site configuration'),
					);
	
					$path = "$path/fields/update/%";
					$field_arg = count(explode('/', $path)) - 1;
					$items[$path] = array(
							'load arguments' => array(),
							'title' => 'Update title field',
							'page callback' => 'drupal_get_form',
							'page arguments' => array('title_update_form', $entity_type, $bundle_arg, $field_arg),
					) + $access;
				}
			}
		}
	}
	
	return $items;
}

/**
 * Implmenetens a form to finally trigger the title field update
 */
function title_update_form($form, $form_state, $entity_type, $bundle, $field_name) {
	// Taken from title.admin.inc::title_field_replacement_form(..)
	$bundle_name = field_extract_bundle($entity_type, $bundle);
	$instance = field_info_instance($entity_type, $field_name, $bundle_name);
	$enabled = !empty($instance);
	
	$form['#entity_type'] = $entity_type;
	$form['#bundle'] = $bundle_name;
	$form['#field_name'] = $field_name;
	
	$form['enabled'] = array(
			'#type' => 'checkbox',
			'#title' => t('Update %bundle::%field with %bundle::title values', array('%field' => $field_name, '%bundle' => $bundle_name)),
			'#description' => t('If this is enabled the %bundle::%field will be updated with the latest values of %bundle::title.', array('%field' => $field_name, '%bundle' => $bundle_name)),
			'#default_value' => !$enabled,
			'#disabled' => !$enabled,
	);
	
	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Update'));
	return $form;
}

/**
 * Process title_field update form submissions
 */
function title_update_form_submit($form, &$form_state) {
	if ($form_state['values']['enabled'] != $form['enabled']['#default_value']) {
		drupal_set_message(t('%field updated with latest values.', array('%field' => $form['#field_name'])));
		title_field_update_batch_set($form['#entity_type'], $form['#bundle'], $form['#field_name']);
	}
	$form_state['redirect'] = _field_ui_bundle_admin_path($form['#entity_type'], $form['#bundle']) . '/fields';
}

/**
 * Set batch for update processing
 */
function title_field_update_batch_set($entity_type, $bundle, $legacy_field) {
	$batch = array(
		'title' => t('Updating field values for %bundle::%field', array('%field' => $legacy_field, '%bundle' => $bundle)),
		'operations' => array(
			array('title_field_update_batch', array($entity_type, $bundle, $legacy_field)),
		),
	);
	batch_set($batch);
}

/**
 * Batch operation: initialize a batch of updating field values.
 */
function title_field_update_batch($entity_type, $bundle, $legacy_field, &$context) {
	$entity_info = entity_get_info($entity_type);
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', $entity_type);

	// There is no general way to tell if an entity supports bundle conditions
	// (for instance taxonomy terms and comments do not), hence we may need to
	// loop over all the entities of the given type.
	if (!empty($entity_info['efq bundle conditions'])) {
		$query->entityCondition('bundle', $bundle);
	}

	if (empty($context['sandbox'])) {
		$count_query = clone $query;
		$total = $count_query
			->count()
			->execute();

		$context['sandbox']['steps'] = 0;
		$context['sandbox']['progress'] = 0;
		$context['sandbox']['total'] = $total;
	}

	$start = STEP * $context['sandbox']['steps']++;
	$results = $query
		->entityCondition('entity_type', $entity_type)
		->range($start, STEP)
		->execute();

	if (!empty($results[$entity_type])) {
		$ids = array_keys($results[$entity_type]);
		title_field_update_init($entity_type, $bundle, $legacy_field, $ids);
		$context['sandbox']['progress'] += count($ids);
	}

	if ($context['sandbox']['progress'] != $context['sandbox']['total']) {
		$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['total'];
	}
}

function title_field_update_init($entity_type, $bundle, $legacy_field, $ids) {
	$GLOBALS['title_field_update_init'] = TRUE;
	$entities = entity_load($entity_type, $ids);
	foreach ($entities as $id => $entity) {
		list(, , $entity_bundle) = entity_extract_ids($entity_type, $entity);
		if ($entity_bundle == $bundle  && 
				empty($entity->title) &&
				!empty($entity->title_original)) {
			$entity->title = $entity->title_original;
			$entity->title_field = array (TITLE_DEFAULT_LANGUAGE => array (0 => array (
						'value' => $entity->title_original,
						'format' => null,
						'safe_value' => $entity->title_original,
					),
				),
			);
			field_attach_presave($entity_type, $entity);
			field_attach_update($entity_type, $entity);
		}
	}
	unset($GLOBALS['title_field_update_init']);
}
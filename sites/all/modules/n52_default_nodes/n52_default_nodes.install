<?php
/*
 * Copyright (C) 2016
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 * 
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 * 
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 * 
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
 
include_once 'nodes/api_json.php';
include_once 'nodes/cookies.php';
include_once 'nodes/imprint.php';
include_once 'nodes/javascript-required.php';
include_once 'nodes/landingpage_accordion.php';
include_once 'nodes/matchmaking.php';
include_once 'nodes/related-portals.php';
include_once 'nodes/sitemap.php';

function n52_default_nodes_enable() {
	global $user;
	
	$edit_warning = "
			<!--
			
			YOU MUST NOT EDIT THIS CONTENT USING THE WEB UI! USE THE CODE!
			
			-->
			";
	
	$nodes = array (
		_n52_default_nodes_api_json(),
		_n52_default_nodes_cookies(),
		_n52_default_nodes_imprint(),
		_n52_default_nodes_javascript_required(),
		_n52_default_nodes_landingpage_accordion(),
		_n52_default_nodes_matchmaking(),
		_n52_default_nodes_related_portals(),
		_n52_default_nodes_sitemap(),
	);
	
	foreach ($nodes as $node_content) {
	
		$query = db_select('node', 'n');
		$query->condition('title', $node_content['title'])
			->fields('n', array('nid'));
		$result = $query->execute();
	
		if($result->rowCount() <= 0) {
			_n52_default_nodes_add_node($node_content, $edit_warning);
		}
		else {
			$nid = $result->fetchAssoc()['nid'];
			_n52_default_nodes_update_node($nid, $node_content, $edit_warning);
		}
	}
}

/*
 * Update body, title and alias for each given language of existing node
 */
function _n52_default_nodes_update_node($nid, $node_content, $edit_warning) {
	$node = node_load($nid);
	$changed = FALSE;
	$current_alias = drupal_get_path_alias("node/$nid");
	if (isset($node_content['alias']) && strcmp($current_alias, $node_content['alias']) != 0) {
		$delete = array (
				'source' => "node/$nid",
				'alias' => $node_content['alias'],
		);
		path_save($delete);
	}
	// update body
	foreach ($node_content['text'] as $lang_code => $value) {
		// 1. body is different
		// 2. TODO body is absent
		if ( isset($node->body[$lang_code]) && strcmp($node->body[$lang_code][0]['value'],_n52_default_nodes_apply_replacement_tags($value)) != 0) {
			$changed = TRUE;
			$node->body[$lang_code][0]['value'] = $edit_warning . 
				_n52_default_nodes_apply_replacement_tags($value);
			$node->body[$lang_code][0]['format'] = 'full_html_plain_no_filter_';
		}
		elseif (!isset($node->body[$lang_code])) {
			$changed = TRUE;
			$node->body[$lang_code]['0']['value'] = $edit_warning . 
				_n52_default_nodes_apply_replacement_tags($value);
			$node->body[$lang_code][0]['format'] = 'full_html_plain_no_filter_';
		}
	}
	$lang_code = NULL;
	$value = NULL;
	// update title
	foreach ($node_content['title'] as $lang_code => $value) {
		// 1. title is different
		// 2. title is absent
		if ( isset($nody->title_field[$lang_code])  && strcmp($node->title_field[$lang_code][0]['value'], $value) != 0) {
			$changed = TRUE;
			$node->title_field[$lang_code][0]['value'] = $value;
		}
		elseif (!isset($nody->title_field[$lang_code])) {
			$changed = TRUE;
			$node->title_field[$lang_code][0]['value'] = $value;
		}
	}
	if ($changed) {
		$node->revision_moderation = FALSE;
		$node->subscriptions_notify = FALSE;
		node_save($node);
	}
	if (isset($node_content['menu'])) {
		_n52_default_nodes_ensure_menu_item_existence($nid, $node_content);
	}
}

/*
 * Create new node
 */
function _n52_default_nodes_add_node($node_content, $edit_warning) {
	global $user;
	$new_node = entity_create('node', array('type' => 'page'));
	$new_node->uid = $user->uid;
	$entity = entity_metadata_wrapper('node',$new_node);

	// comments closed
	$entity->comment->set(1);
	$entity->revision->set(TRUE);
	$entity->language->set(LANGUAGE_NONE);
	
	$entity->save();
	$nid = entity_id('node', $new_node);
	if (isset($node_content['alias'])) {
		$path = array (
				'source' => "node/$nid",
				'alias' => $node_content['alias'],
		);
		path_save($path);
	}
	$node = node_load($nid);
	$node->revision_moderation = FALSE;
	$node->status = 1;
	$node->subscriptions_notify = FALSE;
	foreach ($node_content['text'] as $lang_code => $value) {
		$node->body[$lang_code][0] = array (
			'value' => $edit_warning .
			_n52_default_nodes_apply_replacement_tags($value),
			'format' => 'full_html_plain_no_filter_',
		);
	}
	// Default is english or undefined
	if (isset($node_content['title']['en'])) {
		$node->title = $node_content['title']['en'];
		$node->title_original = $node_content['title']['en'];
	}
	else {
		$node->title = $node_content['title']['und'];
		$node->title_original = $node_content['title']['und'];
	}
	foreach ($node_content['title'] as $lang_code => $value) {
		$node->title_field[$lang_code][0]['value'] = $value;
	}
	node_save($node);
	if (isset($node_content['menu'])) {
		_n52_default_nodes_ensure_menu_item_existence($nid, $node_content);
	}
}


function _n52_default_nodes_apply_replacement_tags($text_to_filter) {
	// the base url without trailing "/"
	// hence %BASE_URL% requires the user to add a trailing "/"
	global $base_url;
	
	$filtered_text = str_replace("%BASE_URL%", $base_url, $text_to_filter);
	
	return $filtered_text;
}

/*
 * Method checks for an menu item with the given title in the given menu
 */
function _n52_default_nodes_ensure_menu_item_existence($nid, $node_content){
	$changed = false;
	
	$menu = menu_load_links($node_content['menu']['name']);
	
	// TODO
	
// 	i18n_string
	
	// check for menu item with title $node_content['title']['en']
	// if not found
		// add new menu item
		// with label for different languages
	// else
		// update menu item
		// check for each language the label
	
	if ($changed) {
		menu_cache_clear($node_content['menu']['name']);
	}
}
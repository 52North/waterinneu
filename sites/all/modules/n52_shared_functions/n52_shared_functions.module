<?php
/*
 * Copyright (C) 2015
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
function n52_endsWith($url, $pattern, $is_regex = FALSE) {
	if ($is_regex) {
		return $pattern === "" || fnmatch('*' . $pattern, $url);
	} else {
		return $pattern === "" || (($temp = strlen($url) - strlen($pattern)) >= 0 && strpos($url, $pattern, $temp) !== FALSE);
	}
}

function n52_urlEndsWith($url, $pattern, $is_regex = FALSE) {
	if (n52_endsWith($url, $pattern, $is_regex)) {
		return TRUE;
	}
	$object = menu_get_object();
	$path = drupal_lookup_path("source", $url);
	
	if (!$path && !$object) {
		return FALSE;
	}
	if (isset($object) && isset($object->nid)){
		$alias = drupal_get_path_alias('node/' . $object->nid, 'en');
		return n52_endsWith($alias, $pattern, $is_regex);
	}
	return n52_endsWith($path, $pattern, $is_regex);
}

function n52_taxonomy_name_vid_map() {
	$vocabs = taxonomy_get_vocabularies();
	$vocab_names = array();
	foreach($vocabs as $vocab) {
		$vocab_names[$vocab->name] = $vocab->vid;
		$vocab_names[$vocab->machine_name] = $vocab->vid;
	}
	return $vocab_names;
}

function n52_taxonomy_get_name_by_vid($vid) {
	$vocabs = taxonomy_get_vocabularies();
	foreach ($vocabs as $vocab) {
		if ($vocab->vid == $vid) {
			return $vocab->name;
		}
	}
	return NULL;
}

function n52_taxonomy_get_machine_name_by_vid($vid) {
	$vocabs = taxonomy_get_vocabularies();
	foreach ($vocabs as $vocab) {
		if ($vocab->vid == $vid) {
			return $vocab->machine_name;
		}
	}
	return NULL;
}

function n52_taxonomy_get_vid_content_type_map() {
	$name_vid_map = n52_taxonomy_name_vid_map();
	$type_vid_map = array();
	foreach (node_type_get_types() as $type){
		$fields = field_info_instances('node', $type->type);
		//$extra_fields = field_info_extra_fields('node', $type->type, 'form');
		
		foreach ($fields as $field) {
			$field_info = field_info_field($field['field_name']);
			if ($field_info['type'] == 'taxonomy_term_reference'){
				$vid = $name_vid_map[$field_info['settings']['allowed_values'][0]['vocabulary']];
				$type_vid_map[$vid][] = $type->type; 
			}
		}
		$fields = NULL;
		$extra_fields = NULL;
	}
	return $type_vid_map;
}

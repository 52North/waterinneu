<?php

/**
 * @file
 * harmony_moderation.module
 */

/**
 * Implements hook_menu().
 */
function harmony_moderation_menu() {
  $items = array();

  $items['admin/harmony/config/moderation'] = array(
    'title' => 'Moderation & Reporting',
    'description' => 'Configure moderation & reporting settings for Harmony posts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('harmony_moderation_settings_form'),
    'access arguments' => array('administer flags'),
  );

  $items['ajax/harmony/moderation/view-report-text/%flagging/%ctools_js'] = array(
    'title' => 'Other reason or extra information',
    'load arguments' => array(4),
    'page callback' => 'harmony_moderation_view_other_reason_text',
    'page arguments' => array(4, 6),
    'access arguments' => array('moderate harmony_posts'),
  );

  $items['ajax/harmony/moderation/view-reports/%harmony_post/%ctools_js'] = array(
    'title callback' => 'harmony_moderation_reports_title',
    'title arguments' => array(4),
    'page callback' => 'harmony_moderation_view_reports',
    'page arguments' => array(4, 5),
    'access callback' => 'harmony_core_post_access_callback',
    'access arguments' => array('view', 4),
  );

  $items['ajax/harmony/moderation/remove-report/%flagging/%/%ctools_js'] = array(
    'title' => 'Post remove report',
    'page callback' => 'harmony_moderation_remove_report',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('moderate harmony_posts'),
    'type' => MENU_CALLBACK,
  );

  $items['flag/ctools-modal/%/%flag/%/%/%ctools_js'] = array(
    'title' => 'Flag confirm',
    'page callback' => 'harmony_moderation_flag_get_confirm_form',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function harmony_moderation_permission() {
  return array(
    'moderate harmony_posts' => array(
      'title' => t('Moderate Harmony posts'),
      'description' => t('Gives access to the moderation queue.'),
      'restrict access' => TRUE,
    ),
    'bypass harmony_posts reporting limit' => array(
      'title' => t('Bypass reporting limit'),
      'description' => t('Allows users to not be limited as to the number of posts that they can report in an amount of time.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function harmony_moderation_admin_paths() {
  $paths = array(
    'ajax/harmony/moderation/view-report-text/%flagging/%ctools_js' => TRUE,
    'ajax/harmony/moderation/view-reports/%harmony_post/%ctools_js' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_views_api().
 */
function harmony_moderation_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'harmony_moderation') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function harmony_moderation_theme() {
  return array(
    'harmony_moderation_post_reports' => array(
      'variables' => array(
        'post' => NULL,
      ),
    ),
  );
}

/**
 * Remove report menu callback.
 */
function harmony_moderation_remove_report($flagging, $token, $js = NULL) {
  global $user;
  $output = array();

  if (empty($token) || $token && !drupal_valid_token($token, $user->uid)) {
    $output[] = ajax_command_alert(t('Invalid security token.'));
  }
  elseif ($flagging->flag_name === 'harmony_post_report') {
    // Remove the entity, entity_delete doesn't work here, dislike
    // but is the best way as far as I can tell.
    db_delete('flagging')->condition('flagging_id', $flagging->flagging_id)->execute();

    // Delete field data.
    field_attach_delete('flagging', $flagging);

    // Update flag counts.
    $entity_counts = flag_get_counts('harmony_post', $flagging->entity_id);
    $count = !empty($entity_counts['harmony_post_report']) ? $entity_counts['harmony_post_report'] : 0;

    if ($count > 0) {
      $count--;
      db_update('flag_counts')
        ->fields(array(
          'count' => $count,
        ))
        ->condition('fid', $flagging->fid)
        ->condition('entity_id', $flagging->entity_id)
        ->execute();
    }
    elseif ($count == 0) {
      db_delete('flag_counts')
        ->condition('fid', $flagging->fid)
        ->condition('entity_id', $flagging->entity_id)
        ->execute();
    }

    $output[] = ajax_command_replace('#post-moderate-remove-report-' . $flagging->flagging_id, t('Report removed'));
  }
  else {
    $output[] = ajax_command_alert(t("This flagging instance isn't a Harmony Moderation report."));
  }

  // Output.
  print ajax_render($output);

  global $devel_shutdown;
  $devel_shutdown = FALSE;

  drupal_exit();
}

/**
 * Determine if a flag is an abuse flag.
 *
 * @param string $flag_name
 *   The machine name of the flag.
 * @return bool
 *   Whether the flag is an abuse flag or not.
 */
function harmony_moderation_is_abuse_flag($flag_name) {
  // Use in_array() in strict mode, so that array keys aren't detected.
  return in_array($flag_name, variable_get('harmony_moderation_flags', array('harmony_post_report')), TRUE);
}

/**
 * Implements hook_flag_access().
 *
 * Limit access to a flag abuse flag if the entity has been whitelisted.
 */
function harmony_moderation_flag_access($flag, $entity_id, $action, $account) {
  // Whitelisted content will prevent showing the report flag link.
  if (variable_get('harmony_moderation_whitelist_enabled', 1)) {
    $content_flags = flag_get_counts($flag->entity_type, $entity_id);
    if (harmony_moderation_is_abuse_flag($flag->name)) {
      // Check to see if there is a whitelist flag.
      if (isset($content_flags['harmony_post_report_whitelist']) && $content_flags['harmony_post_report_whitelist'] >= 1) {
        return FALSE;
      }
    }
  }

  // Prevent users from flagging their own content.
  global $user;
  if ($user->uid && harmony_moderation_is_abuse_flag($flag->name)) {
    $post = harmony_post_load($entity_id);

    if ($post && $user->uid == $post->uid) {
      return FALSE;
    }
  }

  // Not whitelisted then, let's check the flood control if it's active.
  if (variable_get('harmony_moderation_flood_control_enabled', 1) && !user_access('bypass harmony_posts reporting limit') && harmony_moderation_is_abuse_flag($flag->name)) {
    $number = db_query("SELECT COUNT(*) FROM {flagging} WHERE fid = :fid AND uid = :uid AND timestamp > :timestamp", array(
      ':fid' => $flag->fid,
      ':uid' => $user->uid,
      ':timestamp' => REQUEST_TIME - variable_get('harmony_moderation_flood_control_interval', 3600),
    ))->fetchField();

    if ($number >= variable_get('harmony_moderation_flood_control_limit', 10)) {
      return FALSE;
    }
  }
}

/**
 * Implements hook_flag_flag().
 *
 * When unflagging abuse, remove all other reports of abuse, check that the
 * post is published and if the first post make sure the thread is published.
 */
function harmony_moderation_flag_flag($flag, $entity_id, $account, $flagging) {
  // The Whitelist!
  if ($flag->name === 'harmony_post_report_whitelist') {
    // Reset all reports.
    $flags = variable_get('harmony_moderation_flags', array('harmony_post_report'));
    if (!empty($flags)) {
      foreach ($flags as $abuse_flag_name) {
        $abuse_flag = flag_get_flag($abuse_flag_name);
        flag_reset_flag($abuse_flag, $entity_id);
      }
    }

    // Load up the post.
    $post = harmony_post_load($entity_id);

    if ($post) {
      $wrapper = entity_metadata_wrapper('harmony_post', $post);

      // Re-publish.
      if ($post->status == HARMONY_NOT_PUBLISHED) {
        $wrapper->status->set(HARMONY_PUBLISHED);
        $wrapper->save();
      }

      // Check to see if we need to re-publish the thread too.
      if ($post->first_post) {
        $wrapper->field_harmony_thread->status->set(HARMONY_PUBLISHED);
        $wrapper->field_harmony_thread->save();
      }
    }
  }
  // Abuse flags, implement the threshold unpublishing.
  elseif (harmony_moderation_is_abuse_flag($flag->name) && variable_get('harmony_moderation_unpublish_threshold_enabled', TRUE)) {
    $entity_flag_counts = flag_get_counts('harmony_post', $entity_id);

    // Shall we unpublish?
    if ($entity_flag_counts[$flag->name] >= variable_get('harmony_moderation_unpublish_threshold', 10)) {
      // Load up the post.
      $post = harmony_post_load($entity_id);

      if ($post) {
        $wrapper = entity_metadata_wrapper('harmony_post', $post);

        // Unpublish.
        if ($post->status == HARMONY_PUBLISHED) {
          $wrapper->status->set(HARMONY_NOT_PUBLISHED);
          $wrapper->save();
        }

        // Check to see if we need to unpublish the thread too.
        if ($post->first_post) {
          $wrapper->field_harmony_thread->status->set(HARMONY_NOT_PUBLISHED);
          $wrapper->field_harmony_thread->save();
        }
      }
    }
  }
}

/**
 * Implements hook_flag_unflag().
 *
 * When unflagging abuse, remove all other reports of abuse.
 */
/*function harmony_moderation_flag_unflag($flag, $entity_id, $account, $flagging) {
  if (harmony_moderation_is_abuse_flag($flag->name)) {
    flag_reset_flag($flag, $entity_id);
  }
}*/

/**
 * Implements hook_features_pipe_flag_alter().
 */
function harmony_moderation_features_pipe_flag_alter(&$pipe, $data, $export) {
  foreach ($data as $flag_name) {
    if (harmony_moderation_is_abuse_flag($flag_name)) {
      $pipe['dependencies'][] = 'harmony_moderation';
      break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add #state to the form so that when the "Other" option is clicked the
 * textarea is shown.
 */
function harmony_moderation_form_flag_confirm_alter(&$form, &$form_state, $form_id) {
  // Only act on harmony abuse flags, and if the fields we want to mess with
  // are present.
  if (!empty($form['#bundle']) && harmony_moderation_is_abuse_flag($form['#bundle'])) {
    // Hide the source field.
    $form['field_harmony_moderation_source']['#type'] = 'hidden';

    if (!empty($form['field_harmony_moderation_reason']) && !empty($form['field_harmony_moderation_text'])) {
      $form['field_harmony_moderation_text']['#states'] = array(
        'visible' => array(
          ':input[id="edit-field-harmony-moderation-reason-und-other"]' => array('checked' => TRUE),
        ),
      );
    }
  }
}

/**
 * Form builder callback.
 */
function harmony_moderation_settings_form() {
  $form = array();

  $form['harmony_moderation_unpublish_threshold_enabled'] = array(
    '#title' => t('Enable unpublishing of posts after a number of reports'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('harmony_moderation_unpublish_threshold_enabled', TRUE),
  );

  $form['harmony_moderation_unpublish_threshold'] = array(
    '#title' => t('Number of reports to automatically unpublish after'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Specify the number of reports to unpublish a post or potentially a thread (if the first post in the thread) after.'),
    '#default_value' => variable_get('harmony_moderation_unpublish_threshold', 10),
    '#states' => array(
      'visible' => array(
        ':input[id="edit-harmony-moderation-unpublish-threshold-enabled"]' => array('checked' => TRUE),
      ),
    ),
    '#element_validate' => array(
      'element_validate_number',
    ),
  );

  $form['harmony_moderation_flood_control_enabled'] = array(
    '#title' => t('Enable reporting flood control'),
    '#description' => t('This allows you to limit the number of times a user can report a post within a certain interval.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('harmony_moderation_flood_control_enabled', TRUE),
  );

  $form['flood_control'] = array(
    '#title' => t('Flood control settings'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[id="edit-harmony-moderation-flood-control-enabled"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['flood_control']['harmony_moderation_flood_control_interval'] = array(
    '#title' => t('Time interval'),
    '#type' => 'select',
    '#options' => array(0 => t('None (disabled)')) + drupal_map_assoc(array(60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval'),
    '#default_value' => variable_get('harmony_moderation_flood_control_interval', 3600),
  );

  $form['flood_control']['harmony_moderation_flood_control_limit'] = array(
    '#title' => t('Maximum number of reports allowed within the interval'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_moderation_flood_control_limit', 10),
    '#element_validate' => array(
      'element_validate_number',
    ),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_flag_default_flags().
 */
function harmony_moderation_flag_default_flags() {
  $flags = array();

  // Exported flag: "Report a post".
  $flags['harmony_post_report'] = array(
    'entity_type' => 'harmony_post',
    'title' => 'Report a post',
    'global' => 0,
    'types' => array(
      0 => 'harmony_post',
    ),
    'flag_short' => 'Report',
    'flag_long' => 'Report this post as inappropriate',
    'flag_message' => 'Reported',
    'unflag_short' => 'Remove report',
    'unflag_long' => '',
    'unflag_message' => '',
    'unflag_denied_text' => 'Post reported',
    'link_type' => 'harmony_moderation_ctools_modal',
    'weight' => 0,
    'show_in_links' => array(
      'full' => 'full',
      'inline_reply' => 0,
      'diff_standard' => 0,
      'token' => 0,
    ),
    'show_as_field' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'show_contextual_link' => FALSE,
    'form_flagging_help' => '',
    'form_flagging_button' => '',
    'form_flagging_delete_button' => '',
    'form_unflagging_help' => '',
    'form_unflagging_button' => '',
    'form_unflag_link_leads_to_edit' => 0,
    'form_interaction' => 'flagging_dialog',
    'api_version' => 3,
  );

  // Exported flag: "Harmony Post reporting - Whitelist".
  $flags['harmony_post_report_whitelist'] = array(
    'entity_type' => 'harmony_post',
    'title' => 'Harmony Post reporting - Whitelist',
    'global' => 0,
    'types' => array(
      0 => 'harmony_post',
    ),
    'flag_short' => 'Whitelist this post',
    'flag_long' => 'Remove reports and whitelist against future reports.',
    'flag_message' => 'Whitelisted',
    'unflag_short' => 'Remove from whitelist',
    'unflag_long' => 'Remove this post from the whitelist so that it can be reported.',
    'unflag_message' => 'Removed from whitelist',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => 0,
    'show_in_links' => array(
      'full' => 0,
      'inline_reply' => 0,
      'diff_standard' => 0,
      'token' => 0,
    ),
    'show_as_field' => 0,
    'show_on_form' => 1,
    'access_author' => '',
    'show_contextual_link' => FALSE,
    'api_version' => 3,
  );

  return $flags;
}

/**
 * Theme function to return the content of a posts report page.
 */
function theme_harmony_moderation_post_reports($variables) {
  $post = $variables['post'];
  $status = $post->status == HARMONY_PUBLISHED ? t('published') : t('unpublished');
  $output = '<p>' . t('This post is currently @status.', array('@status' => $status)) . '</p>';

  // Build up links.
  $links = array(
    'view' => array(
      'title' => t('View the post'),
      'href' => 'post/' . $post->post_id,
    ),
    'edit' => array(
      'title' => t('Edit the post'),
      'href' => 'post/' . $post->post_id . '/edit',
    ),
    'delete' => array(
      'title' => t('Delete the post'),
      'href' => 'post/' . $post->post_id . '/delete',
    ),
    'whitelist' => array(
      'title' => flag_create_link('harmony_post_report_whitelist', $post->post_id),
      'href' => NULL,
      'html' => TRUE,
    ),
  );
  $output .= theme('links', array(
    'links' => $links,
    'attributes' => array('class' => array('links', 'inline')),
  ));

  $output .= views_embed_view(variable_get('harmony_moderation_reported_posts_post_view', 'harmony_moderation_reported_posts_post'), 'default', $post->post_id);

  return $output;
}

/**
 * Page callback for viewing the other specified reason or further information.
 */
function harmony_moderation_view_other_reason_text($flagging_entity, $js = NULL) {
  $output = NULL;
  $wrapper = entity_metadata_wrapper('flagging', $flagging_entity);

  // Make sure we have the field we need.
  if ($wrapper->__isset('field_harmony_moderation_text')) {
    $output = $wrapper->field_harmony_moderation_text->value(array('sanitize' => TRUE));
  }

  // Return in the method you are accustomed to.
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');

    print ctools_modal_render(t('Other reason or extra information'), $output);

    global $devel_shutdown;
    $devel_shutdown = FALSE;

    drupal_exit();
  }
  else {
    return $output;
  }
}

/**
 * Menu title callback.
 */
function harmony_moderation_reports_title($post) {
  return t('Reports on &quot;@title&quot;', array('@title' => $post->title));
}

/**
 * Page callback to grab the reports on a post.
 */
function harmony_moderation_view_reports($post, $js = NULL) {
  $wrapper = entity_metadata_wrapper('harmony_post', $post);

  $output = theme('harmony_moderation_post_reports', array('post' => $post));

  // Return in the method you are accustomed to.
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');

    print ctools_modal_render(harmony_moderation_reports_title($post), $output);

    global $devel_shutdown;
    $devel_shutdown = FALSE;

    drupal_exit();
  }
  else {
    return $output;
  }
}

/**
 * Implements hook_flag_link_type_info().
 */
function harmony_moderation_flag_link_type_info() {
  return array(
    'harmony_moderation_ctools_modal' => array(
      'title' => t('Ctools Modal form'),
      'description' => t('The user will be shown a confirmation form on in a Ctools modal to confirm the flag.'),
      'options' => array(
        'flag_confirmation' => '',
        'unflag_confirmation' => '',
      ),
      'uses standard js' => FALSE,
      'uses standard css' => FALSE,
      'provides form' => TRUE,
    ),
  );
}

/**
 * Implements hook_flag_link().
 */
function harmony_moderation_flag_link($flag, $action, $entity_id) {
  if ($flag->link_type === 'harmony_moderation_ctools_modal') {
    drupal_add_library('system', 'drupal.ajax');
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(drupal_get_path('module', 'harmony_moderation') . '/harmony-moderation.js');

    // Check access prior to output so we can adjust classes else we'll get
    // JavaScript errors.
    $classes = array("flag-ctools-modal-$flag->name-$action-$entity_id");
    if ($flag->access($entity_id, $action)) {
      $classes[] = 'flag-ctools-modal';
      $classes[] = 'use-ajax';
    }

    global $user;
    $token = drupal_get_token($user->uid);

    return array(
      'href' => "flag/ctools-modal/$action/$flag->name/$entity_id/$token/nojs",
      'query' => drupal_get_destination(),
      'attributes' => array(
        'class' => $classes,
      ),
    );
  }
  else {
    return flag_flag_link($flag, $action, $entity_id);
  }
}

function harmony_moderation_flag_get_confirm_form($action, $flag, $entity_id, $token, $js = NULL) {
  global $user;

  // Check for a valid token.
  if (empty($token) || $token && !drupal_valid_token($token, $user->uid)) {
    if (!$js) {
      drupal_access_denied();
    }
    else {
      $output = array(ajax_command_alert(t('Invalid security token.')));
      print ajax_render($output);

      global $devel_shutdown;
      $devel_shutdown = FALSE;

      drupal_exit();
    }
  }

  // Load the file that contains the form callback.
  module_load_include('inc', 'flag', 'includes/flag.pages');

  if (!$js) {
    drupal_set_title(check_plain($flag->title));
    return drupal_get_form('flag_confirm', $action, $flag, $entity_id);
  }

  ctools_include('ajax');
  ctools_include('modal');

  $output = NULL;

  // Give me the form plz! We would use ctools_modal_form_wrapper() but
  // it doesn't allow us to pass arguments to the form builder.
  $form_state = array(
    'title' => check_plain($flag->title),
    'ajax' => TRUE,
    're_render' => FALSE,
    'no_redirect' => TRUE,
    'build_info' => array(
      'args' => array(
        $action,
        $flag,
        $entity_id,
      ),
    ),
  );

  $form_built = drupal_build_form('flag_confirm', $form_state);
  if (empty($form_state['executed'])) {
    // Change the cancel link to close the modal.
    $form_built['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), '#', array(
        'attributes' => array(
          'class' => 'ctools-close-modal',
        ),
        'external' => TRUE,
      )),
    );

    $output = ctools_modal_form_render($form_state, $form_built);
  }
  else {
    // Has been submitted.
    $output = array();

    // Check that the user can perform the flag action, if not the replace the
    // original link with the unflag denied text.
    $flag_action = $flag->is_flagged($entity_id) ? 'unflag' : 'flag';
    if ($flag->access($entity_id, $flag_action)) {
      $output[] = array(
        'command' => 'insertNoWrapper',
        'method' => 'replaceWith',
        'selector' => '.flag-' . str_replace('_', '-', $flag->name) . '-' . $entity_id,
        'data' => $flag->theme($flag_action, $entity_id, array('needs_wrapping_element' => FALSE)),
        'settings' => NULL,
      );
    }
    else {
      $output[] = array(
        'command' => 'insertNoWrapper',
        'method' => 'replaceWith',
        'selector' => '.flag-' . str_replace('_', '-', $flag->name) . '-' . $entity_id,
        'data' => '<span class="flag unflag-disabled flag-harmony-post-report">' . check_plain($flag->unflag_denied_text) . '</span>',
        'settings' => NULL,
      );
    }

    $output[] = ctools_modal_command_dismiss();
  }

  // Output.
  print ajax_render($output);

  global $devel_shutdown;
  $devel_shutdown = FALSE;

  drupal_exit();
}

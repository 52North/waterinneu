<?php
/*
 * Copyright (C) 2015
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
/* Important variables for search and replace
 * Module Form URL: search/advanced
 */
//
// Form creating
//
function n52_advanced_search_form($form, &$form_state) {

	$form ['content_type'] = array (
		'#type' => 'radios',
		'#title' => t( 'What are you looking for?' ),
		'#options' => array (
			'content-type-event' => t('Events'),
      		'content-type-organisation' => t('Organisations'),
      		'content-type-product' => t('Products'),
      		'content-type-project' => t('Projects'),
      		'content-type-service-offering' => t('Service Offerings'),
      		'content-type-service-request' => t('Service Requests'),
		),
	);

	$vocabs_map = _creat_vocabs_map ();
  
	$orga_options = array(); 
	foreach (taxonomy_get_tree($vocabs_map['Organisation Classification']) as &$orga_class) {
	  	$clean_name = str_replace(' ','-',str_replace('-','---',strtolower($orga_class->name)));
  		$orga_options['orga-class-' . $clean_name] = t($orga_class->name);
	}
	$orga_class = null;
  
	$form ['orga_class'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What organisation type are you looking for?' ),
  		'#options' => $orga_options,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array ('value' => 'content-type-organisation'),
  				),
  		),
	);
	
	$orga_options = null;
  
	$product_options = array();
	foreach (taxonomy_get_tree($vocabs_map['Product Categories']) as &$product_category) {
  		$clean_name = str_replace(' ','-',strtolower($product_category->name));
  		$product_options['product-category-' . $clean_name] = t($product_category->name);
	}
	$product_category = null;
  
	$form ['product_category'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What product category are you looking for?' ),
  		'#options' => $product_options,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array ('value' => 'content-type-product'),
  				),
  		),
	);
  
  	$service_options = array();
  	foreach (taxonomy_get_tree($vocabs_map['Service Categories']) as &$service_category) {
  		$clean_name = str_replace(' ','-',strtolower($service_category->name));
  		$service_options['product-category-' . $clean_name] = t($service_category->name);
	}
  
	$form ['service_category'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What service category are you looking for?' ),
  		'#options' => $service_options,
  		'#states' => array (
  				'visible' => array (
  						array (':input[name="content_type"]' => array ('value' => 'content-type-service-offering')),
  						'or',
  						array (':input[name="content_type"]' => array ('value' => 'content-type-service-request')),
  				),
  		),
	);
  
	$form['search_textfield'] = array (
  		'#type' => 'textfield',
  		'#size' => 60,
  		'#maxlength' => 128,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array (
  							array ('value' => 'content-type-event'),
  							array ('value' => 'content-type-organisation'),
							array ('value' => 'content-type-product'),
  							array ('value' => 'content-type-project'),
  							array ('value' => 'content-type-service-offering'),
  							array ('value' => 'content-type-service-request'),
  						),
  				),
  		),
  		'#attributes' => array ('placeholder' => t('Search marketplace')),
	);
  
	$form['submit_search'] = array (
  		'#type' => 'submit',
  		'#value' => t('Search'),
  		'#states' => array (
  				'visible' => array (
  						array (':input[name="content_type"]' => array ('value' => 'content-type-event')),
  						array (':input[name="orga_class"]' => array('checked' => TRUE)),
  						array (':input[name="product_category"]' => array('checked' => TRUE)),
  						array (':input[name="content_type"]' => array ('value' => 'content-type-project')),
  						array (':input[name="service_category"]' => array('checked' => TRUE)),
  				),
  		),
  		'#submit' => array ('_n52_advanced_search_submit_search'),
  		'#name' => 'submit_search',
	);

	return $form;
}
function _creat_vocabs_map() {
	$vocabs_map = array();
	foreach (taxonomy_get_vocabularies() as &$vocab) {
 		$vocabs_map[$vocab->name] = $vocab->vid;
	}
	return $vocabs_map;
}


function _n52_advanced_search_submit_search($form, &$form_state) {
	# if something fails, we redirect back to the form with error messages
	$default_target = "/search/advanced";
	$content_type = $form_state['values']['content_type'];
	if (strlen($content_type) === 0) {
		// this never happen
		drupal_set_message(t('Please select a content type'), 'error');
		drupal_goto($default_target);
	}
	$content_type = str_replace('content-type-','',$content_type);
	$search_text = $form_state['values']['search_textfield'];
	if (strlen($search_text) === 0) {
		drupal_set_message(t('Please enter a search term'), 'error');
		drupal_goto($default_target);
	}
	$target = $default_target . "/" . $search_text . "||";
	switch ($content_type) {
		case 'event' :
			$target .= "type:event";
			break;
		case 'organisation' :
			$target .= "type:organisation";
			if(strlen($form_state['values']['orga_class'])) {
				$target .= " orga-class:" . str_replace('orga-class-','',str_replace(' ', '__', $form_state['values']['orga_class']));
			} else {
				drupal_set_message(t('Please select organisation class'), 'error');
			}
			break;
		case 'product' :
			$target .= "type:tool";
			break;
		case 'project' :
			$target .= "type:project";
			break;
		case 'service-offering' :
			$target .= "type:service-offering";
			break;
		case 'service-request' :
			$target .= "type:service-request";
			break;
	}
	drupal_goto($target);
}

/**
 * Implement hook_block_info().
 */
function n52_advanced_search_block_info() {
	$blocks = array();

	$blocks['n52_advanced_search_block']['info'] = t('For displaying advanced search results');
	$blocks['n52_advanced_search_block']['visibility'] = BLOCK_VISIBILITY_LISTED;
	$blocks['n52_advanced_search_block']['pages'] = 'search/advanced*';
	$blocks['n52_advanced_search_block']['theme'] = 'n52_wieu_theme';
	$blocks['n52_advanced_search_block']['region'] = 'content';
	$blocks['n52_advanced_search_block']['status'] = 1;

	return $blocks;
}

/**
 * Implement hook_block_view().
 */
function n52_advanced_search_block_view($block_name = '') {
	if ($block_name == 'n52_advanced_search_block') {
		if (sizeof(arg()) > 2) {
			$tmp = explode('||',arg(2));
			$keywords = $tmp[0];
			$parameters = explode(' ',$tmp[1]);
			$query = new EntityFieldQuery ();
			$query->entityCondition ( 'entity_type', 'node' );
			_process_parameters ( $parameters, $query );

			$result = $query->execute ();
			$nodes = array ();
			if (isset ( $result ['node'] )) {
				$nids = array_keys ( $result ['node'] );
				$nodes = node_load_multiple ( $nids );
			}
			
			$list = array ();
			foreach ( $nodes as $node ) {
				$options = array (
						'absolute' => TRUE 
				);
				$url = url ( 'node/' . $node->nid, $options );
				$list [] = '<a href=' . $url . '>' . $node->title . '</a>';
			}
			$theme_args = array (
				'items' => $list,
				'type' => 'ol' 
			);
			$subject = t ( 'Search Results' );
			if (sizeof($nodes) === 0) {
				$content = t('Nothing found.');
			} else {
				$content = theme ( 'item_list', $theme_args );
			}
		} else {
			$content = '';
			$subject = '';
		}
		
		$block = array (
				'subject' => $subject,
				'content' => $content, 
		);
		return $block;
	}
}

function _process_parameters($parameters, &$query) {
	$vocabs_map = _creat_vocabs_map ();
	if (strpos($parameters[0], 'type:event') > -1) {
		$query->entityCondition ( 'bundle', 'event' );
	}
	elseif (strpos($parameters[0], 'type:organisation') > -1) {
		$query->entityCondition('bundle', 'organisation')
			->fieldCondition('field_class', 'tid', _get_term_id(str_replace('orga-class:', '', $parameters[1]), $vocabs_map['Organisation Classification']));
	}
	elseif (strpos($parameters[0], 'type:product') > -1) {
		$query->entityCondition('bundle', 'tool');
	}
	elseif (strpos($parameters[0], 'type:project') > -1) {
		$query->entityCondition('bundle', 'project');
	}
	elseif (strpos($parameters[0], 'type:service-offering') > -1) {
		$query->entityCondition('bundle', 'service-offering');
	}
	elseif (strpos($parameters[0], 'type:service-request') > -1) {
		$query->entityCondition('bundle', 'service-request');
	}
}

function _get_term_id($term_encoded, $vid) {
	$term = taxonomy_get_term_by_name(str_replace('---','-', str_replace('-',' ', $term_encoded)), $vid);
	return $term->tid;
}

/**
 * Implements hook_menu()
 *
 * Form WebUI
 */
function n52_advanced_search_menu() {
	$items ['search/advanced'] = array (
			'title' => t('Advanced Search'),
			'description' => t('Advanced Search provides a form supporting users to find the right content.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array ('n52_advanced_search_form'),
			'access arguments' => array ('access content')
	);
	return $items;
}

/**
 * Implements hook_from_FORM-ID_alter()
 *
 * Add advanced search link to search form pop-up
 */
function n52_advanced_search_block_view_alter(&$data, $block) {
	if (isset($data) && isset($data['content']) && isset($data['content']['form_id']) && isset($data['content']['form_id']['#value']) &&
			$data['content']['form_id']['#value'] == 'custom_search_blocks_form_1' &&
			isset($data['content']['popup'])) {
		$data['content']['popup']['link'] = array (
				'#markup' => l(t('Advanced Search'),'search/advanced'),
				// weight > 0 => link is display below content type checkboxes
				// weight <= 0 => link is displayed above content type checkboxes
				'#weight' => 0,
		);
	}
}

<?php
/*
 * Copyright (C) 2015
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
/* Important variables for search and replace
 * Module Form URL: search/advanced
 */
//
// Form creation
//
function n52_search_wizard_form($form, &$form_state) {

	$form ['content_type'] = array (
		'#type' => 'radios',
		'#title' => t( 'What are you looking for?' ),
		'#options' => array (
			'content-type-event' => t('Events'),
      		'content-type-organisation' => t('Organisations'),
      		'content-type-product' => t('Products'),
      		'content-type-project' => t('Projects'),
      		'content-type-service-offering' => t('Service Offerings'),
      		'content-type-service-request' => t('Service Requests'),
		),
	);

	$vocabs_map = array();
	foreach (taxonomy_get_vocabularies() as &$vocab) {
 		$vocabs_map[$vocab->name] = $vocab->vid;
	}
  
	$orga_options = array(); 
	foreach (taxonomy_get_tree($vocabs_map['Organisation Classification']) as &$orga_class) {
	  	$clean_name = str_replace(' ','-',strtolower($orga_class->name));
  		$orga_options['orga-class-' . $clean_name] = t($orga_class->name);
	}
	$orga_class = null;
  
	$form ['orga_class'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What organisation type are you looking for?' ),
  		'#options' => $orga_options,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array ('value' => 'content-type-organisation'),
  				),
  		),
	);
	
	$orga_options = null;
  
	$product_options = array();
	foreach (taxonomy_get_tree($vocabs_map['Product Categories']) as &$product_category) {
  		$clean_name = str_replace(' ','-',strtolower($product_category->name));
  		$product_options['product-category-' . $clean_name] = t($product_category->name);
	}
	$product_category = null;
  
	$form ['product_category'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What product category are you looking for?' ),
  		'#options' => $product_options,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array ('value' => 'content-type-product'),
  				),
  		),
	);
  
  	$service_options = array();
  	foreach (taxonomy_get_tree($vocabs_map['Service Categories']) as &$service_category) {
  		$clean_name = str_replace(' ','-',strtolower($service_category->name));
  		$service_options['product-category-' . $clean_name] = t($service_category->name);
	}
  
	$form ['service_category'] = array (
  		'#type' => 'radios',
  		'#title' => t( 'What service category are you looking for?' ),
  		'#options' => $service_options,
  		'#states' => array (
  				'visible' => array (
  						array (':input[name="content_type"]' => array ('value' => 'content-type-service-offering')),
  						'or',
  						array (':input[name="content_type"]' => array ('value' => 'content-type-service-request')),
  				),
  		),
	);
  
	$form['search_textfield'] = array (
  		'#type' => 'textfield',
  		'#size' => 60,
  		'#maxlength' => 128,
  		'#states' => array (
  				'visible' => array (
  						':input[name="content_type"]' => array (
  							array ('value' => 'content-type-event'),
  							array ('value' => 'content-type-organisation'),
							array ('value' => 'content-type-product'),
  							array ('value' => 'content-type-project'),
  							array ('value' => 'content-type-service-offering'),
  							array ('value' => 'content-type-service-request'),
  						),
  				),
  		),
  		'#attributes' => array ('placeholder' => t('Search marketplace')),
	);
  
	$form['submit_search'] = array (
  		'#type' => 'submit',
  		'#value' => t('Search'),
  		'#states' => array (
  				'visible' => array (
  						array (':input[name="content_type"]' => array ('value' => 'content-type-event')),
  						array (':input[name="orga_class"]' => array('checked' => TRUE)),
  						array (':input[name="product_category"]' => array('checked' => TRUE)),
  						array (':input[name="content_type"]' => array ('value' => 'content-type-project')),
  						array (':input[name="service_category"]' => array('checked' => TRUE)),
  				),
  		),
  		'#submit' => array ('n52_search_wizard_submit_search'),
  		'#name' => 'submit_search',
	);

	return $form;
}

function n52_search_wizard_submit_search($form, &$form_state) {
	# if something fails, we redirect to the user guide
	$target = "/user-guide";
	$demand = $form_state['values']['non_expert_demands'];
	if ($demand) {
		if ($demand === 'non_expert_demands_tools') {
			$target = "/tools";
		}
		elseif ($demand === 'non_expert_demands_projects') {
			$target = "/projects";
		}
		elseif ($demand === 'non_expert_demands_organisations') {
			$target = "/organisations";
		}
	}
	drupal_goto($target);
}

/**
 * Implements hook_menu()
 *
 * Form WebUI
 */
function n52_search_wizard_menu() {
	$items ['search/advanced'] = array (
			'title' => t('Advanced Search'),
			'description' => t('Search Wizard Description.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array ('n52_search_wizard_form'),
			'access arguments' => array ('access content')
	);
	return $items;
}

/**
 * Implements hook_from_FORM-ID_alter()
 *
 * Add advanced search link to search form pop-up
 */
function n52_search_wizard_block_view_alter(&$data, $block) {
	if (isset($data) && isset($data['content']) && isset($data['content']['form_id']) && isset($data['content']['form_id']['#value']) &&
			$data['content']['form_id']['#value'] == 'custom_search_blocks_form_1' &&
			isset($data['content']['popup'])) {
		$data['content']['popup']['link'] = array (
				'#markup' => l(t('Advanced Search'),'search/advanced'),
				// weight > 0 => link is display below content type checkboxes
				// weight <= 0 => link is displayed above content type checkboxes
				'#weight' => 0,
		);
	}
}

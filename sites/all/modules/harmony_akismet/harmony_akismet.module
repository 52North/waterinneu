<?php

/**
 * Implements hook_permission().
 */
function harmony_akismet_permission() {
  return array(
    'administer harmony_akismet' => array(
      'title' => t('Administer Harmony Akismet integration'),
      'description' => t('Gives access to the Harmony akismet integration settings.'),
      'restrict access' => TRUE,
    ),
    'bypass harmony_akismet' => array(
      'title' => t('Bypass Harmony Akismet checking'),
      'description' => t("User with this permission won't be subject to checking their Harmony content via the Akismet service.")
    ),
  );
}

/**
 * Implements hook_menu().
 */
function harmony_akismet_menu() {
  $items = array();

  $items['admin/harmony/config/moderation/akismet'] = array(
    'title' => 'Akismet',
    'description' => 'Configure Harmony & Akismet integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('harmony_akismet_settings_form'),
    'access arguments' => array('administer harmony_akismet'),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function harmony_akismet_form_harmony_core_thread_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('harmony_akismet_api_key', '') != '') {
    // Add in a custom submit handler which will go before the harmony_core one.
    array_unshift($form['#validate'], 'harmony_akismet_thread_form_validate');
    array_unshift($form['#submit'], 'harmony_akismet_thread_form_submit');
  }
}

/**
 * Form validate handler for the Harmony core thread form to copy the inline
 * entity post form value to the form_state in an easy to get to way.
 */
function harmony_akismet_thread_form_validate($form, &$form_state) {
  // This makes me a bit sad...
  $thread_lang = !empty($form_state['values']['thread']->language) ? $form_state['values']['thread']->language : LANGUAGE_NONE;
  $post_lang = !empty($form_state['values']['thread']->language) ? $form_state['values']['field_harmony_first_post'][$thread_lang]['form']['post']->language : LANGUAGE_NONE;

  if (!empty($form_state['values']['field_harmony_first_post'][$thread_lang]['form']['field_harmony_text'][$post_lang][0]['value'])) {
    global $user;

    $content = array(
      'text' => $form_state['values']['title'] . ' ' . $form_state['values']['field_harmony_first_post'][$thread_lang]['form']['field_harmony_text'][$post_lang][0]['value'],
      'username' => $user->name,
      'email' => $user->mail,
    );

    // Check in with Akismet.
    $ha = new HarmonyAkismet();
    $response = $ha->text_check($content);

    if ($response === 'spam') {
      // Reject.
      if (!variable_get('harmony_akismet_spam_content_action', 0)) {
        $error_message = variable_get('harmony_akismet_post_rejected', t("Sorry but your post sounds too spammy for us and won't be allowed. If you think this is in error please get in touch, perhaps submit a report to <a href=\"@akismet_help_url\">Akismet</a>."));
        form_set_error('field_harmony_first_post][' . $thread_lang . '][form][field_harmony_text][' . $post_lang . '][0]', format_string($error_message, array('@akismet_help_url' => url('http://akismet.com/contact'))));
      }
      // Retain.
      else {
        $form_state['values']['thread']->harmony_akismet_flag_content = TRUE;
      }
    }
    // Somethings wrong and we want to block content.
    elseif ($response === '' && !variable_get('harmony_akismet_api_down', 1)) {
      form_set_error('', t('The Akismet API is currently unavailable to validate your submission.'));
    }
  }
}

function harmony_akismet_thread_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['thread']->harmony_akismet_flag_content)) {
    $form_state['values']['status'] = HARMONY_NOT_PUBLISHED;
  }
}

/**
 * Implements hook_harmony_thread_save_finalised().
 */
function harmony_akismet_harmony_thread_save_finalised(&$thread, &$form_state) {
  if (!empty($thread->harmony_akismet_flag_content)) {
    $wrapper = entity_metadata_wrapper('harmony_thread', $thread);
    $post_id = $wrapper->field_harmony_first_post->value() ? $wrapper->field_harmony_first_post->post_id->value() : NULL;

    // If we've worked out the first post, flag it as spam!
    if ($post_id) {
      harmony_akismet_flag_post($post_id);
    }

    // Setup a different path to redirect to so the user doesn't see an access
    // denied page.
    $message = variable_get('harmony_akismet_thread_entered_queue', t('Your thread has been entered into a moderation queue pending approval.'));
    drupal_set_message(check_plain($message));

    $redirect_path = variable_get('harmony_akismet_thread_entered_queue_redirect_path', 'forum');
    if ($redirect_path != '') {
      $form_state['redirect'] = $redirect_path;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function harmony_akismet_form_harmony_core_post_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('harmony_akismet_api_key', '') != '') {
    // Add in a custom submit handler which will go before the harmony_core one.
    array_unshift($form['#validate'], 'harmony_akismet_post_form_validate');
    array_unshift($form['actions']['submit']['#submit'], 'harmony_akismet_post_form_submit');
    array_unshift($form['#submit'], 'harmony_akismet_post_form_submit');
  }
}

function harmony_akismet_post_form_validate($form, &$form_state) {
  // This makes me a bit sad...
  $lang = !empty($form_state['values']['post']->language) ? $form_state['values']['post']->language : LANGUAGE_NONE;

  if (!empty($form_state['values']['field_harmony_text'][$lang][0]['value'])) {
    global $user;

    $content = array(
      'text' => $form_state['values']['field_harmony_text'][$lang][0]['value'],
      'username' => $user->name,
      'email' => $user->mail,
    );

    // Check in with Akismet.
    $ha = new HarmonyAkismet();
    $response = $ha->text_check($content);

    if ($response === 'spam') {
      // Reject.
      if (!variable_get('harmony_akismet_spam_content_action', 0)) {
        $error_message = variable_get('harmony_akismet_post_rejected', t("Sorry but your post sounds too spammy for us and won't be allowed. If you think this is in error please get in touch, perhaps submit a report to <a href=\"@akismet_help_url\">Akismet</a>."));
        form_set_error('field_harmony_text][' . $lang . '][0][value', format_string($error_message, array('@akismet_help_url' => url('http://akismet.com/contact'))));
      }
      // Retain.
      else {
        $form_state['values']['post']->harmony_akismet_flag_content = TRUE;
      }
    }
    // Somethings wrong and we want to block content.
    elseif ($response === '' && !variable_get('harmony_akismet_api_down', 1)) {
      form_set_error('', t('The Akismet API is currently unavailable to validate your submission.'));
    }
  }
}

function harmony_akismet_post_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['post']->harmony_akismet_flag_content)) {
    $form_state['values']['status'] = HARMONY_NOT_PUBLISHED;
  }
}

/**
 * Implements hook_harmony_post_save_finalised().
 */
function harmony_akismet_harmony_post_save_finalised(&$post, &$form_state) {
  if (!empty($post->harmony_akismet_flag_content)) {
    // Flag the post!
    harmony_akismet_flag_post($post->post_id);

    // Setup a different path to redirect to so the user doesn't see an access
    // denied page.
    $message = variable_get('harmony_akismet_post_entered_queue', t('Your post has been entered into a moderation queue pending approval.'));
    drupal_set_message(check_plain($message));

    $redirect_path = variable_get('harmony_akismet_post_entered_queue_redirect_path', 'forum');
    if ($redirect_path != '') {
      $form_state['redirect'] = $redirect_path;
    }
  }
}

/**
 * This function takes care of flagging a post and setting the flag details
 * as to why it was flagged (Spam).
 */
function harmony_akismet_flag_post($post_id) {
  global $user;
  // @todo integrate properly with:
  // variable_get('harmony_moderation_flags', array('harmony_post_report'));

  $flag_name = 'harmony_post_report';
  // Load the flag.
  $flag = flag_get_flag($flag_name);
  $values = array(
    'fid' => $flag->fid,
    'flag_name' => $flag_name,
    'entity_type' => 'harmony_post',
    'entity_id' => $post_id,
    'uid' => $user->uid,
    'timestamp' => REQUEST_TIME,
  );

  // Create the flagging entity, set the values but don't save yet.
  $reasons = variable_get('harmony_akismet_report_reasons', array('spam', 'other'));

  $flagging = entity_create('flagging', $values);
  $flagging_wrapper = entity_metadata_wrapper('flagging', $flagging);

  $flagging_wrapper->field_harmony_moderation_source->set(t('Akismet'));
  $flagging_wrapper->field_harmony_moderation_reason->set($reasons);
  $flagging_wrapper->field_harmony_moderation_text->set(t('This content was reported by Akismet as spam.'));

  // Set the flag.
  $flag->flag('flag', $post_id, NULL, TRUE, $flagging);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
/*function harmony_akismet_form_harmony_thread_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['mollom']['feedback'])) {
    // Mollom module is a pest that changes the description weight...
    $form['description']['#weight'] = -100;
    // Change the default value to be Do not report else there isn't a default
    // value.
    $form['mollom']['feedback']['#default_value'] = '';
  }
}*/

/**
 * Implements hook_form_FORM_ID_alter().
 */
/*function harmony_akismet_form_harmony_post_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['mollom']['feedback'])) {
    // Mollom module is a pest that changes the description weight...
    $form['description']['#weight'] = -100;
    // Change the default value to be Do not report else there isn't a default
    // value.
    $form['mollom']['feedback']['#default_value'] = '';
  }
}*/

/**
 * Module settings form callback.
 */
function harmony_akismet_settings_form() {
  $form = array();

  // API based settings.
  $api_key = variable_get('harmony_akismet_api_key', '');
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Akismet API Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => $api_key != '',
  );

  $form['api']['harmony_akismet_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Akismet API key'),
    '#required' => TRUE,
    '#default_value' => $api_key,
    '#description' => t("Enter your API key for Akismet, <a href=\"!sign_up\" target=\"_blank\">sign up</a> if you don't already have one.", array('!sign_up' => url('http://akismet.com/signup/'))),
  );

  $form['api']['harmony_akismet_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Time-out when contacting the Akismet service'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_timeout', 3),
    '#element_validate' => array('element_validate_integer_positive'),
    '#field_suffix' => t('seconds'),
    '#size' => 4,
  );

  $form['api']['harmony_akismet_api_down'] = array(
    '#type' => 'radios',
    '#title' => t('Behaviour when the Akismet API cannot be contacted'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_api_down', 1),
    '#options' => array(
      1 => t('Allow all submissions'),
      0 => t('Block all submissions'),
    ),
    '#description' => t('Note that if an issue occurs resulting in a non Ham or Spam result this setting will determine what to do.'),
  );

  $form['api']['harmony_akismet_logging'] = array(
    '#type' => 'radios',
    '#title' => t('Watchdog logging level'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_logging', 0),
    '#options' => array(
      t("Don't log anything"),
      t('Log spam responses'),
      t('Log all responses'),
    ),
    '#description' => t('It is suggested that whilst testing your integration with real-world content that you log all responses from the API, this will give you the best chance of debugging failures or understand how Akismet is responding to your content. For information on what the calls should look like and responses '),
  );

  $form['api']['harmony_akismet_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Testing mode'),
    '#default_value' => variable_get('harmony_akismet_test_mode', FALSE),
    '#description' => t('<p>Enabling test mode will alter Akismets responses to text analysis to behaviour either as Spam or Ham.</p><p>To force a Spam response include the word "<strong>spam</strong>" in the thread/post body text, to force a Ham response use the word "<strong>ham</strong>" instead.</p>'),
  );


  // Behaviour settings.
  $form['behaviours'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis behaviours'),
    '#collapsible' => FALSE,
  );

  $form['behaviours']['harmony_akismet_data_to_send'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Data to include along with text for analysis'),
    '#default_value' => variable_get('harmony_akismet_data_to_send', array('email')),
    '#options' => array(
      'username' => t('Author username'),
      'email' => t('Author email address'),
    ),
    '#description' => t('Pick and choose which of the optional information to include in the text analysis request.'),
  );

  $form['behaviours']['harmony_akismet_spam_content_action'] = array(
    '#type' => 'radios',
    '#title' => t('What to do with content identified as Spam'),
    '#default_value' => variable_get('harmony_akismet_spam_content_action', 0),
    '#options' => array(
      t('Reject the content'),
      t('Unpublish and retain the content in the moderation queue'),
    ),
    '#description' => t("<p>Rejecting the content means that it won't be saved in to the site, the form will not validate.</p><p>Unpublish and retain means that the content is unpublished and not visible on the site and placed into the <a href=\"!moderation_url\">Harmony moderation queue</a>.</p>", array('!moderation_url' => url('admin/harmony/content/moderation'))),
  );


  // Messaging relating to behaviours.
  $form['messaging'] = array(
    '#type' => 'fieldset',
    '#title' => t('Behaviour messaging'),
    '#collapsible' => FALSE,
  );

  $form['messaging']['harmony_akismet_thread_rejected'] = array(
    '#type' => 'textarea',
    '#title' => t('Thread rejected as spam message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_thread_rejected', t("Sorry but your thread sounds too spammy for us and won't be allowed. If you think this is in error please get in touch, perhaps submit a report to <a href=\"@akismet_help_url\">Akismet</a>.")),
    '#description' => t("This message is shown to the user when a thread they're trying to submit is rejected as spam. Using the text \"@akismet_help_url\" will be replaced with the actual URL."),
  );

  $form['messaging']['harmony_akismet_thread_entered_queue'] = array(
    '#type' => 'textarea',
    '#title' => t('Thread moderation message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_thread_entered_queue', t('Your thread has been entered into a moderation queue pending approval.')),
    '#description' => t("This message is shown to the user when a thread they've created is moved to the moderation queue."),
  );

  $form['messaging']['harmony_akismet_post_rejected'] = array(
    '#type' => 'textarea',
    '#title' => t('Post rejected as spam message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_post_rejected', t("Sorry but your post sounds too spammy for us and won't be allowed. If you think this is in error please get in touch, perhaps submit a report to <a href=\"@akismet_help_url\">Akismet</a>.")),
    '#description' => t("This message is shown to the user when a post they're trying to submit is rejected as spam. Using the text \"@akismet_help_url\" will be replaced with the actual URL."),
  );

  $form['messaging']['harmony_akismet_post_entered_queue'] = array(
    '#type' => 'textarea',
    '#title' => t('Post moderation message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_akismet_post_entered_queue', t('Your post has been entered into a moderation queue pending approval.')),
    '#description' => t("This message is shown to the user when a post they've created is moved to the moderation queue."),
  );

  // Build the form.
  $system_form = system_settings_form($form);

  // Add in our custom validator.
  $system_form['#validate'][] = 'harmony_akismet_admin_settings_validate';

  return $system_form;
}

/**
 * Form validator callback for the admin settings form.
 */
function harmony_akismet_admin_settings_validate($form, &$form_state) {
  if (!empty($form_state['values']['harmony_akismet_api_key'])) {
    // Check to see if the API key works.
    $ha = new HarmonyAkismet($form_state['values']['harmony_akismet_api_key']);
    // Verify key uses drupal_set_message to provide feedback.
    $ha->verify_key();
  }
}

<?php

/**
 * @file
 * atjs.install
 */

/**
 * Implements hook_schema().
 */
function atjs_schema() {
  $schema = array();

  $schema['atjs_listener'] = array(
    'description' => 'Storage for At.js listeners.',
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'name',
      'admin_title' => 'title',
      'identifier' => 'listener',
      'default hook' => 'default_atjs_listener',
      'delete callback' => 'atjs_delete_listener',
      'api' => array(
        'owner' => 'atjs',
        'api' => 'default_atjs_listener',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => 'The machine-name for this listener.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable title for this listener.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'entity_type' => array(
        'description' => 'The listener entity type, such as one of "node", "comment", or "user".',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'bundles' => array(
        'description' => 'The listener target bundles.',
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'record_usage' => array(
        'description' => 'Record activity such as additions and removal of mentions against a listener and entity.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'boolean' => TRUE,
      ),
      'at' => array(
        'description' => 'The trigger string for this listener.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
        'default' => '',
      ),
      'tpl' => array(
        'description' => 'The template string used in the autocomplete menu.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'insert_tpl' => array(
        'description' => 'The template string used in the autocomplete menu.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'search_key' => array(
        'description' => 'The search key used for matching.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'data_to_supply' => array(
        'description' => 'A serialized array of data to supply to templates.',
        'type' => 'text',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'query_limit' => array(
        'description' => 'Number of results to limit to.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 5,
        'boolean' => FALSE,
      ),
      'max_length' => array(
        'description' => 'Maximum length of accepted query.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 10,
        'boolean' => FALSE,
      ),
      'allow_spaces' => array(
        'description' => 'Allow At.js library to include spaces in the search term.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'boolean' => TRUE,
      ),
      'lookup_on_click' => array(
        'description' => 'Render the display results when an insert template is clicked.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'character_set' => array(
        'description' => 'The characters supported by this listener.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => 'basic',
      )
    ),
    'primary key' => array('name'),
  );

  $schema['atjs_listener_usage'] = array(
    'fields' => array(
      'aluid' => array(
        'description' => 'The unique ID for this usage record.',
        'type' => 'serial',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'listener' => array(
        'description' => 'The machine-name for the listener.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
        'default' => '',
      ),
      'source_entity_type' => array(
        'description' => 'The entity type of the entity which has the field, and is the source of the mention.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'source_bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'source_field_name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The name of the field which the listener is attached to, and the mention is in.',
      ),
      'source_entity_id' => array(
        'description' => 'The unique ID of the object from where entity is being mentioned.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mentioned_entity_type' => array(
        'description' => 'The entity type of the entity is being mentioned.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'mentioned_entity_id' => array(
        'description' => 'The unique ID of the object, being mentioned.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'ID of Drupal user who created the mention.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp when the usage occurred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'dismissed' => array(
        'description' => 'Flag indicating whether At.js usage has been dismissed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'boolean' => TRUE,
      ),
    ),
    'indexes' => array(
      'listener' => array('listener'),
      'source_entity_type' => array('source_entity_type'),
      'source_entity_id' => array('source_entity_id'),
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'mention_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('aluid'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function atjs_requirements($phase) {
  $requirements = array();

  if ($phase === 'runtime') {
    $t = get_t();

    $requirements = array(
      'atjs_libraries' => array(
        'title' => $t('At.js - Libraries'),
        'severity' => REQUIREMENT_OK,
      ),
    );

    $libraries = libraries_get_libraries();
    $installed_atjs = libraries_detect('at.js');
    $installed_caretjs = libraries_detect('caret.js');

    $atjs_library = array(
      'status' => '',
      'severity' => REQUIREMENT_OK,
    );
    $caretjs_library = array(
      'status' => '',
      'severity' => REQUIREMENT_OK,
    );

    if (!isset($libraries['at.js']) || $libraries['at.js'] === FALSE) {
      $atjs_library['status'] = $t('At.js library was not found.');
      $atjs_library['severity'] = REQUIREMENT_ERROR;
    }
    elseif (version_compare($installed_atjs['version'], ATJS_LIBRARY_ATJS_MINIMUM_VERSION) < 0) {
      $atjs_library['status'] = $t('Your installation of At.js library is incompatible, please upgrade to at least v@minimum_version', array(
        '@minimum_version' => ATJS_LIBRARY_ATJS_MINIMUM_VERSION,
      ));
      $atjs_library['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $atjs_library['status'] = $t('At.js library installed at v@installed_version.', array(
        '@installed_version' => $installed_atjs['version'],
      ));
    }

    if (!isset($libraries['caret.js']) || $libraries['caret.js'] === FALSE) {
      $caretjs_library['status'] = $t('Caret.js library was not found.');
      $caretjs_library['severity'] = REQUIREMENT_ERROR;
    }
    elseif (version_compare($installed_caretjs['version'], ATJS_LIBRARY_CARETJS_MINIMUM_VERSION) < 0) {
      $caretjs_library['status'] = $t('Your installation of Caret.js library is incompatible, please upgrade to at least v@minimum_version', array(
        '@minimum_version' => ATJS_LIBRARY_CARETJS_MINIMUM_VERSION,
      ));
      $caretjs_library['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $caretjs_library['status'] = $t('Caret.js library installed at v@installed_version.', array(
        '@installed_version' => $installed_caretjs['version'],
      ));
    }

    $requirements['atjs_libraries']['value'] = $t('@atjs_status @caretjs_status',
      array(
        '@atjs_status' => $atjs_library['status'],
        '@caretjs_status' => $caretjs_library['status'],
      )
    );

    if (!($atjs_library['severity'] === REQUIREMENT_OK && $caretjs_library['severity'] === REQUIREMENT_OK)) {
      $requirements['atjs_libraries']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}

/**
 * Add allow_spaces & lookup_on_click fields to atjs_listener table.
 * Add timestamp & dismissed fields to atjs_listener_usage table.
 */
function atjs_update_7101() {
  $listener_schema = drupal_get_schema('atjs_listener');
  $usage_schema = drupal_get_schema('atjs_listener_usage');

  if (!db_field_exists('atjs_listener', 'allow_spaces')) {
    db_add_field('atjs_listener', 'allow_spaces', $listener_schema['fields']['allow_spaces']);
  }

  if (!db_field_exists('atjs_listener', 'lookup_on_click')) {
    db_add_field('atjs_listener', 'lookup_on_click', $listener_schema['fields']['lookup_on_click']);
  }

  if (!db_field_exists('atjs_listener_usage', 'timestamp')) {
    db_add_field('atjs_listener_usage', 'timestamp', $usage_schema['fields']['timestamp']);
  }

  if (!db_field_exists('atjs_listener_usage', 'dismissed')) {
    db_add_field('atjs_listener_usage', 'dismissed', $usage_schema['fields']['dismissed']);
  }
}

/**
 * Add character_set field to atjs_listener table.
 */
function atjs_update_7102() {
  $listener_schema = drupal_get_schema('atjs_listener');

  if (!db_field_exists('atjs_listener', 'character_set')) {
    db_add_field('atjs_listener', 'character_set', $listener_schema['fields']['character_set']);
  }
}